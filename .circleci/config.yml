version: 2
jobs:
  compile:
    machine: true

    steps:
    - checkout

    - run:
        name: Launch Openshift with Istio
        command: |
          kube_version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl -LO https://storage.googleapis.com/kubernetes-release/release/${kube_version}/bin/linux/amd64/kubectl && \
              chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          echo "Installed kubectl CLI tool"

          istiooc_version="v3.10.0%2Bmaistra-0.1.0-3"
          curl -LO https://github.com/Maistra/origin/releases/download/${istiooc_version}/istiooc_linux && \
              chmod +x $PWD/istiooc_linux && sudo mv $PWD/istiooc_linux /usr/local/bin/oc && \
          echo "Installed istiooc CLI tool"

          tmp=`mktemp`
          echo 'DOCKER_OPTS="$DOCKER_OPTS --insecure-registry 172.30.0.0/16  --insecure-registry registry.access.redhat.com"' > ${tmp}
          sudo mv ${tmp} /etc/default/docker
          sudo mount --make-shared /
          sudo service docker restart
          echo "Configured Docker daemon with insecure-registry"

          oc cluster up --enable=*,istio

          # wait for the Kubernetes Job that starts the Istio installation to commence
          sleep 60

          oc login -u system:admin

          # use the simplest Istio configuration with minimal ES memory
          cat <<EOF | oc apply -n istio-operator -f -
          apiVersion: "istio.openshift.com/v1alpha1"
          kind: "Installation"
          metadata:
            name: "istio-installation"
          EOF

          # wait for the Operator to start the installation of Istio
          sleep 30

          # wait for the istio components to stand up
          timeout 180s bash -c 'while [[ $(oc get pod -l job-name=openshift-ansible-istio-installer-job -n istio-system -o json | jq -r ".items[0].status.phase") == "Pending" ]]; do sleep 10; done; echo ""'
          timeout 300s bash -c 'while [[ $(oc get pod -l job-name=openshift-ansible-istio-installer-job -n istio-system -o json | jq -r ".items[0].status.phase") == "Running" ]]; do sleep 20; done; echo ""'

          # take down components of Istio that we don't need
          # this is done in order to reduce the keep the resources used as low as possible
          timeout 60s bash -c 'while [[ $(oc get deployment -l app=grafana  -n istio-system -o json | jq ".items[0].metadata.name") == "grafana" ]]; do sleep 10; done; echo ""'
          oc scale deployment -l app=grafana -n istio-system  --replicas=0

          timeout 60s bash -c 'while [[ $(oc get deployment -l app=prometheus  -n istio-system -o json | jq ".items[0].metadata.name") == "prometheus" ]]; do sleep 10; done; echo ""'
          oc scale deployment -l app=prometheus -n istio-system  --replicas=0

          timeout 60s bash -c 'while [[ $(oc get deployment -l app=istio-egressgateway  -n istio-system -o json | jq ".items[0].metadata.name") == "istio-egressgateway" ]]; do sleep 10; done; echo ""'
          oc scale deployment -l app=istio-egressgateway -n istio-system  --replicas=0

          oc scale deployment -l app=jaeger -n istio-system  --replicas=0
          oc scale statefulset -l app=elasticsearch -n istio-system  --replicas=0

          echo "Configured OpenShift cluster with Istio 1.0"

    # based on this: https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694/10
    - restore_cache:
        keys:
        - spring-boot-istio-security-booster-{{ .Branch }}-{{ checksum "pom.xml" }}
        - spring-boot-istio-security-booster-{{ .Branch }}
        - spring-boot-istio-security-booster

    - run:
        name: Install Maven dependencies locally
        command: |
          # Need to exclude tests since Maven will fail. See https://stackoverflow.com/q/14694139/2504224
          if ! ./mvnw -q -s .circleci/settings.xml dependency:go-offline; then
              bom_version=$(grep -oPm1 "(?<=<spring-boot.bom.version>)[^<]+" pom.xml)
              echo "Need to checkout the Spring Boot BOM by checking it out from Github using version: ${bom_version}"

              pushd /tmp > /dev/null
              #Clone the BOM from Github, checkout the tag that matches the BOM version and install it locally
              git clone https://github.com/snowdrop/spring-boot-bom.git
              cd spring-boot-bom
              git fetch --all --tags --prune
              git checkout tags/${bom_version}
              mvn install

              echo "Installed BOM from source"

              popd > /dev/null
              #Re-execute command since the BOM has now been installed to the local .m2 directory
              ./mvnw -q -s .circleci/settings.xml dependency:go-offline
          fi

    - save_cache:
        paths:
        - ~/.m2
        key: spring-boot-istio-security-booster-{{ .Branch }}-{{ checksum "pom.xml" }}

    - run:
        name: run tests against fmp build
        command:  |
          oc new-project fmp
          .circleci/run_tests_with_fmp.sh -s .circleci/settings.xml

workflows:
  version: 2
  build_and_test:
    jobs:
    - compile:
        filters:
          branches:
            ignore:
            - /.*redhat.*/
            - /.*rh.*/
